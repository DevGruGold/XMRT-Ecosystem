name: üìä XMRT Ecosystem Activity Logging

on:
  push:
    branches: [ main ]
  issues:
    types: [opened, closed, edited, labeled]
  pull_request:
    types: [opened, closed, merged, edited]
  release:
    types: [published]
  schedule:
    # Log system status every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      log_type:
        description: 'Type of logging to perform'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - system
        - activity
        - performance

env:
  LOG_RETENTION_DAYS: 30

jobs:
  log-system-activity:
    name: üìä System Activity Logger
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üîß Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests PyGithub python-dotenv
        
    - name: üìä Log System Status
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      run: |
        python -c "
        import json
        import requests
        from datetime import datetime, timezone
        import os
        from github import Github, Auth
        
        # Initialize logging data
        log_data = {
            'timestamp': datetime.now(timezone.utc).isoformat(),
            'event_type': '${{ github.event_name }}',
            'repository': '${{ github.repository }}',
            'branch': '${{ github.ref_name }}',
            'commit': '${{ github.sha }}',
            'actor': '${{ github.actor }}',
            'workflow': 'logging',
            'system_status': {},
            'render_status': {},
            'github_activity': {},
            'performance_metrics': {}
        }
        
        # Check system status via dashboard
        try:
            dashboard_url = 'https://xmrt-ecosystem-1-20k6.onrender.com/health'
            response = requests.get(dashboard_url, timeout=10)
            if response.status_code == 200:
                health_data = response.json()
                log_data['system_status'] = {
                    'status': 'healthy',
                    'uptime': health_data.get('uptime', 0),
                    'version': health_data.get('version', 'unknown'),
                    'github_integration': health_data.get('github_integration', False),
                    'real_actions': health_data.get('real_actions', 0),
                    'agents': health_data.get('agents', {})
                }
                print('‚úÖ System status logged successfully')
            else:
                log_data['system_status'] = {'status': 'unhealthy', 'error': f'HTTP {response.status_code}'}
                print(f'‚ö†Ô∏è System status check failed: HTTP {response.status_code}')
        except Exception as e:
            log_data['system_status'] = {'status': 'error', 'error': str(e)}
            print(f'‚ùå System status check error: {e}')
        
        # Get GitHub activity
        try:
            if os.environ.get('GITHUB_TOKEN'):
                auth = Auth.Token(os.environ['GITHUB_TOKEN'])
                github = Github(auth=auth)
                repo = github.get_repo('${{ github.repository }}')
                
                # Get recent activity
                recent_issues = list(repo.get_issues(state='all', sort='updated'))[:10]
                recent_commits = list(repo.get_commits())[:10]
                
                log_data['github_activity'] = {
                    'recent_issues': len(recent_issues),
                    'recent_commits': len(recent_commits),
                    'open_issues': len([i for i in recent_issues if i.state == 'open']),
                    'closed_issues': len([i for i in recent_issues if i.state == 'closed']),
                    'stars': repo.stargazers_count,
                    'forks': repo.forks_count,
                    'watchers': repo.watchers_count
                }
                print('‚úÖ GitHub activity logged successfully')
        except Exception as e:
            log_data['github_activity'] = {'error': str(e)}
            print(f'‚ùå GitHub activity logging error: {e}')
        
        # Save log data
        log_filename = f'logs/system-log-{datetime.now().strftime(\"%Y%m%d-%H%M%S\")}.json'
        os.makedirs('logs', exist_ok=True)
        
        with open(log_filename, 'w') as f:
            json.dump(log_data, f, indent=2)
        
        print(f'‚úÖ Log saved to {log_filename}')
        
        # Print summary
        print('\\nüìä LOGGING SUMMARY:')
        print(f'   Timestamp: {log_data[\"timestamp\"]}')
        print(f'   Event: {log_data[\"event_type\"]}')
        print(f'   System Status: {log_data[\"system_status\"].get(\"status\", \"unknown\")}')
        print(f'   GitHub Activity: {log_data[\"github_activity\"].get(\"recent_issues\", 0)} recent issues')
        print('‚úÖ Activity logging completed')
        "
        
    - name: üìà Log Performance Metrics
      continue-on-error: true
      run: |
        python -c "
        import json
        import requests
        import time
        from datetime import datetime
        
        # Performance test
        start_time = time.time()
        
        endpoints = [
            'https://xmrt-ecosystem-1-20k6.onrender.com/',
            'https://xmrt-ecosystem-1-20k6.onrender.com/health',
            'https://xmrt-ecosystem-1-20k6.onrender.com/agents',
            'https://xmrt-ecosystem-1-20k6.onrender.com/analytics'
        ]
        
        performance_data = {
            'timestamp': datetime.now().isoformat(),
            'endpoint_tests': [],
            'overall_performance': {}
        }
        
        total_response_time = 0
        successful_requests = 0
        
        for endpoint in endpoints:
            try:
                test_start = time.time()
                response = requests.get(endpoint, timeout=10)
                test_end = time.time()
                
                response_time = test_end - test_start
                total_response_time += response_time
                
                endpoint_data = {
                    'endpoint': endpoint,
                    'status_code': response.status_code,
                    'response_time': response_time,
                    'success': response.status_code == 200
                }
                
                if response.status_code == 200:
                    successful_requests += 1
                
                performance_data['endpoint_tests'].append(endpoint_data)
                print(f'‚úÖ {endpoint}: {response.status_code} ({response_time:.3f}s)')
                
            except Exception as e:
                endpoint_data = {
                    'endpoint': endpoint,
                    'error': str(e),
                    'success': False
                }
                performance_data['endpoint_tests'].append(endpoint_data)
                print(f'‚ùå {endpoint}: Error - {e}')
        
        # Calculate overall metrics
        if successful_requests > 0:
            avg_response_time = total_response_time / successful_requests
            success_rate = (successful_requests / len(endpoints)) * 100
        else:
            avg_response_time = 0
            success_rate = 0
        
        performance_data['overall_performance'] = {
            'avg_response_time': avg_response_time,
            'success_rate': success_rate,
            'total_endpoints': len(endpoints),
            'successful_requests': successful_requests,
            'total_test_time': time.time() - start_time
        }
        
        # Save performance log
        perf_filename = f'logs/performance-log-{datetime.now().strftime(\"%Y%m%d-%H%M%S\")}.json'
        with open(perf_filename, 'w') as f:
            json.dump(performance_data, f, indent=2)
        
        print(f'\\nüìà PERFORMANCE SUMMARY:')
        print(f'   Average Response Time: {avg_response_time:.3f}s')
        print(f'   Success Rate: {success_rate:.1f}%')
        print(f'   Successful Requests: {successful_requests}/{len(endpoints)}')
        print(f'‚úÖ Performance metrics logged to {perf_filename}')
        "
        
    - name: üìù Create Activity Report
      run: |
        python -c "
        import json
        import os
        from datetime import datetime
        from glob import glob
        
        # Find latest log files
        system_logs = sorted(glob('logs/system-log-*.json'), reverse=True)
        perf_logs = sorted(glob('logs/performance-log-*.json'), reverse=True)
        
        report = []
        report.append('# üìä XMRT Ecosystem Activity Report')
        report.append(f'**Generated**: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")} UTC')
        report.append(f'**Event**: ${{ github.event_name }}')
        report.append(f'**Repository**: ${{ github.repository }}')
        report.append('')
        
        # System status
        if system_logs:
            with open(system_logs[0]) as f:
                system_data = json.load(f)
            
            report.append('## üöÄ System Status')
            system_status = system_data.get('system_status', {})
            report.append(f'- **Status**: {system_status.get(\"status\", \"unknown\")}')
            report.append(f'- **Version**: {system_status.get(\"version\", \"unknown\")}')
            report.append(f'- **Uptime**: {system_status.get(\"uptime\", 0):.0f}s')
            report.append(f'- **GitHub Integration**: {\"‚úÖ\" if system_status.get(\"github_integration\") else \"‚ùå\"}')
            report.append(f'- **Real Actions**: {system_status.get(\"real_actions\", 0)}')
            report.append('')
            
            # GitHub activity
            github_activity = system_data.get('github_activity', {})
            if 'error' not in github_activity:
                report.append('## üìà GitHub Activity')
                report.append(f'- **Recent Issues**: {github_activity.get(\"recent_issues\", 0)}')
                report.append(f'- **Recent Commits**: {github_activity.get(\"recent_commits\", 0)}')
                report.append(f'- **Open Issues**: {github_activity.get(\"open_issues\", 0)}')
                report.append(f'- **Stars**: {github_activity.get(\"stars\", 0)}')
                report.append(f'- **Forks**: {github_activity.get(\"forks\", 0)}')
                report.append('')
        
        # Performance metrics
        if perf_logs:
            with open(perf_logs[0]) as f:
                perf_data = json.load(f)
            
            report.append('## ‚ö° Performance Metrics')
            overall = perf_data.get('overall_performance', {})
            report.append(f'- **Average Response Time**: {overall.get(\"avg_response_time\", 0):.3f}s')
            report.append(f'- **Success Rate**: {overall.get(\"success_rate\", 0):.1f}%')
            report.append(f'- **Successful Requests**: {overall.get(\"successful_requests\", 0)}/{overall.get(\"total_endpoints\", 0)}')
            report.append('')
            
            report.append('### üîó Endpoint Status')
            for test in perf_data.get('endpoint_tests', []):
                status = '‚úÖ' if test.get('success') else '‚ùå'
                endpoint = test['endpoint'].replace('https://xmrt-ecosystem-1-20k6.onrender.com', '')
                if endpoint == '':
                    endpoint = '/'
                if 'response_time' in test:
                    report.append(f'- {status} **{endpoint}**: {test[\"response_time\"]:.3f}s')
                else:
                    report.append(f'- {status} **{endpoint}**: Error')
            report.append('')
        
        # Save report
        report_content = '\\n'.join(report)
        with open('activity-report.md', 'w') as f:
            f.write(report_content)
        
        print('‚úÖ Activity report generated')
        print(report_content)
        "
        
    - name: üì§ Upload Logs as Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: xmrt-ecosystem-logs-${{ github.run_number }}
        path: |
          logs/
          activity-report.md
        retention-days: ${{ env.LOG_RETENTION_DAYS }}
        
    - name: üìã Add to Step Summary
      run: |
        if [ -f activity-report.md ]; then
          cat activity-report.md >> $GITHUB_STEP_SUMMARY
        fi

  log-agent-activity:
    name: ü§ñ Agent Activity Logger
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.log_type == 'full' || github.event.inputs.log_type == 'activity'
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üîß Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests PyGithub python-dotenv
        
    - name: ü§ñ Log Agent Activities
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python -c "
        import json
        import requests
        from datetime import datetime, timezone, timedelta
        from github import Github, Auth
        import os
        
        # Get agent activity from dashboard
        try:
            agents_url = 'https://xmrt-ecosystem-1-20k6.onrender.com/agents'
            response = requests.get(agents_url, timeout=10)
            
            if response.status_code == 200:
                agents_data = response.json()
                
                activity_log = {
                    'timestamp': datetime.now(timezone.utc).isoformat(),
                    'total_agents': agents_data.get('total_agents', 0),
                    'operational_agents': agents_data.get('operational_agents', 0),
                    'github_integration': agents_data.get('github_integration', False),
                    'real_actions_performed': agents_data.get('real_actions_performed', 0),
                    'agent_details': {}
                }
                
                # Process each agent
                for agent_id, agent_data in agents_data.get('agents', {}).items():
                    activity_log['agent_details'][agent_id] = {
                        'name': agent_data.get('name', 'Unknown'),
                        'status': agent_data.get('status', 'unknown'),
                        'role': agent_data.get('role', 'Unknown'),
                        'operations': agent_data.get('stats', {}).get('operations', 0),
                        'github_actions': agent_data.get('stats', {}).get('github_actions', 0),
                        'success_rate': agent_data.get('performance', {}).get('success_rate', 0),
                        'recent_activities': len(agent_data.get('activities', []))
                    }
                
                # Save agent activity log
                os.makedirs('logs', exist_ok=True)
                log_filename = f'logs/agent-activity-{datetime.now().strftime(\"%Y%m%d-%H%M%S\")}.json'
                
                with open(log_filename, 'w') as f:
                    json.dump(activity_log, f, indent=2)
                
                print('‚úÖ Agent activity logged successfully')
                print(f'üìä AGENT SUMMARY:')
                print(f'   Total Agents: {activity_log[\"total_agents\"]}')
                print(f'   Operational: {activity_log[\"operational_agents\"]}')
                print(f'   Real Actions: {activity_log[\"real_actions_performed\"]}')
                print(f'   GitHub Integration: {\"‚úÖ\" if activity_log[\"github_integration\"] else \"‚ùå\"}')
                
                for agent_id, details in activity_log['agent_details'].items():
                    print(f'   {details[\"name\"]}: {details[\"operations\"]} ops, {details[\"success_rate\"]:.1f}% success')
                
            else:
                print(f'‚ùå Failed to get agent data: HTTP {response.status_code}')
                
        except Exception as e:
            print(f'‚ùå Agent activity logging error: {e}')
        "
        
    - name: üì§ Upload Agent Logs
      uses: actions/upload-artifact@v3
      with:
        name: xmrt-agent-logs-${{ github.run_number }}
        path: logs/agent-activity-*.json
        retention-days: ${{ env.LOG_RETENTION_DAYS }}

  cleanup-old-logs:
    name: üßπ Cleanup Old Logs
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: üßπ Clean Old Artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - ${{ env.LOG_RETENTION_DAYS }});
          
          let deletedCount = 0;
          
          for (const artifact of artifacts.data.artifacts) {
            if (artifact.name.includes('xmrt-ecosystem-logs') || artifact.name.includes('xmrt-agent-logs')) {
              const artifactDate = new Date(artifact.created_at);
              if (artifactDate < cutoffDate) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                deletedCount++;
                console.log(`Deleted old artifact: ${artifact.name}`);
              }
            }
          }
          
          console.log(`Cleaned up ${deletedCount} old log artifacts`);
          
          core.summary.addHeading('üßπ Log Cleanup Summary');
          core.summary.addRaw(`Deleted ${deletedCount} old log artifacts older than ${process.env.LOG_RETENTION_DAYS} days`);
          await core.summary.write();
