name: üìä XMRT Ecosystem Activity Logging

on:
  push:
    branches: [ main ]
  issues:
    types: [opened, closed, edited, labeled]
  pull_request:
    types: [opened, closed, merged, edited]
  release:
    types: [published]
  schedule:
    # Log system status every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      log_type:
        description: 'Type of logging to perform'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - system
        - activity
        - performance

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

env:
  LOG_RETENTION_DAYS: 30

jobs:
  log-system-activity:
    name: üìä System Activity Logger
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: üîß Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests PyGithub python-dotenv

    - name: üìä Log System Status (Safe Mode)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python -c "
import json
import requests
from datetime import datetime, timezone
import os

# Initialize logging data
log_data = {
    'timestamp': datetime.now(timezone.utc).isoformat(),
    'event_type': '${{ github.event_name }}',
    'repository': '${{ github.repository }}',
    'branch': '${{ github.ref_name }}',
    'commit': '${{ github.sha }}',
    'actor': '${{ github.actor }}',
    'workflow': 'logging',
    'system_status': {'status': 'unknown'},
    'github_activity': {'status': 'logged'}
}

# Safe system status check (optional external service)
try:
    # Only check if RENDER_API_KEY is available
    render_key = os.environ.get('RENDER_API_KEY')
    if render_key:
        dashboard_url = 'https://xmrt-ecosystem-xx5w.onrender.com/health'
        response = requests.get(dashboard_url, timeout=5)
        if response.status_code == 200:
            health_data = response.json()
            log_data['system_status'] = {
                'status': 'healthy',
                'uptime': health_data.get('uptime', 0),
                'version': health_data.get('version', 'unknown')
            }
            print('‚úÖ System status logged successfully')
        else:
            log_data['system_status'] = {'status': 'service_unavailable'}
    else:
        log_data['system_status'] = {'status': 'external_check_skipped'}
        print('‚ÑπÔ∏è External service check skipped (no API key)')
except Exception as e:
    log_data['system_status'] = {'status': 'check_failed', 'error': str(e)[:100]}
    print(f'‚ö†Ô∏è System status check failed (non-critical): {e}')

# Log the activity (this always succeeds)
print('üìä Activity logged:', json.dumps(log_data, indent=2))
print('‚úÖ Logging workflow completed successfully')
"
      continue-on-error: true
