name: 🧪 XMRT Ecosystem Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - unit
        - integration
        - performance

env:
  PYTHON_VERSION: '3.11'

jobs:
  test-system:
    name: 🚀 System Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-suite: [unit, integration, performance, security]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock requests-mock
        
    - name: 🧪 Run Unit Tests
      if: matrix.test-suite == 'unit' || github.event.inputs.test_type == 'full'
      run: |
        echo "🧪 Running Unit Tests..."
        python -m pytest tests/unit/ -v --cov=main --cov-report=xml --cov-report=term
        
    - name: 🔗 Run Integration Tests
      if: matrix.test-suite == 'integration' || github.event.inputs.test_type == 'full'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔗 Running Integration Tests..."
        python -m pytest tests/integration/ -v --tb=short
        
    - name: ⚡ Run Performance Tests
      if: matrix.test-suite == 'performance' || github.event.inputs.test_type == 'full'
      run: |
        echo "⚡ Running Performance Tests..."
        python -m pytest tests/performance/ -v --tb=short
        
    - name: 🔒 Run Security Tests
      if: matrix.test-suite == 'security' || github.event.inputs.test_type == 'full'
      run: |
        echo "🔒 Running Security Tests..."
        pip install bandit safety
        bandit -r main.py -f json -o security-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: 📊 Upload Coverage Reports
      if: matrix.test-suite == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: 📋 Create Test Report
      if: always()
      run: |
        echo "## 🧪 Test Results - ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Test Suite**: ${{ matrix.test-suite }}" >> $GITHUB_STEP_SUMMARY
        echo "**Python Version**: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  test-agents:
    name: 🤖 Agent Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        agent: [eliza, dao_governor, defi_specialist, security_guardian, community_manager]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-mock requests-mock
        
    - name: 🤖 Test Agent - ${{ matrix.agent }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AGENT_NAME: ${{ matrix.agent }}
      run: |
        echo "🤖 Testing Agent: ${{ matrix.agent }}"
        python -c "
        import sys
        import os
        sys.path.append('.')
        
        # Import the main application
        from main import agents_state, github_integration, log_agent_activity
        
        # Test agent initialization
        agent_id = '${{ matrix.agent }}'
        if agent_id in agents_state:
            print(f'✅ Agent {agent_id} initialized successfully')
            agent = agents_state[agent_id]
            print(f'   Name: {agent[\"name\"]}')
            print(f'   Role: {agent[\"role\"]}')
            print(f'   Status: {agent[\"status\"]}')
            print(f'   Capabilities: {len(agent[\"capabilities\"])} capabilities')
        else:
            print(f'❌ Agent {agent_id} not found')
            sys.exit(1)
            
        # Test agent activity logging
        log_agent_activity(agent_id, 'test', 'Agent test activity', False)
        print(f'✅ Agent {agent_id} activity logging works')
        
        # Test GitHub integration if available
        if github_integration.is_available():
            print(f'✅ GitHub integration available for {agent_id}')
        else:
            print(f'⚠️ GitHub integration not available (expected in CI)')
        
        print(f'✅ All tests passed for agent {agent_id}')
        "
        
    - name: 📋 Agent Test Summary
      run: |
        echo "## 🤖 Agent Test Results - ${{ matrix.agent }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Agent**: ${{ matrix.agent }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  test-endpoints:
    name: 🌐 API Endpoint Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask requests
        
    - name: 🌐 Test API Endpoints
      run: |
        echo "🌐 Testing API Endpoints..."
        python -c "
        import sys
        import threading
        import time
        import requests
        from main import app
        
        # Start Flask app in background
        def run_app():
            app.run(host='127.0.0.1', port=5000, debug=False)
        
        server_thread = threading.Thread(target=run_app, daemon=True)
        server_thread.start()
        time.sleep(3)  # Wait for server to start
        
        # Test endpoints
        endpoints = [
            ('/', 'Dashboard'),
            ('/health', 'Health Check'),
            ('/agents', 'Agents Status'),
            ('/analytics', 'Analytics'),
            ('/webhooks', 'Webhooks')
        ]
        
        base_url = 'http://127.0.0.1:5000'
        
        for endpoint, name in endpoints:
            try:
                response = requests.get(f'{base_url}{endpoint}', timeout=5)
                if response.status_code == 200:
                    print(f'✅ {name} ({endpoint}): OK')
                else:
                    print(f'❌ {name} ({endpoint}): Status {response.status_code}')
            except Exception as e:
                print(f'❌ {name} ({endpoint}): Error - {e}')
        
        print('✅ API endpoint tests completed')
        "
        
    - name: 📋 Endpoint Test Summary
      run: |
        echo "## 🌐 API Endpoint Test Results" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Endpoints Tested**: 5" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  test-github-integration:
    name: 🔗 GitHub Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # Only run on push/schedule to avoid token exposure
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔗 Test GitHub Integration
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🔗 Testing GitHub Integration..."
        python -c "
        import os
        from main import ComprehensiveGitHubIntegration
        
        # Test GitHub integration
        github_integration = ComprehensiveGitHubIntegration()
        
        if github_integration.is_available():
            print('✅ GitHub integration initialized successfully')
            
            # Test user info
            user_info = github_integration.get_user_info()
            if user_info:
                print(f'✅ User info retrieved: {user_info[\"login\"]}')
            
            # Test repository analysis
            analysis = github_integration.analyze_repository()
            if analysis:
                print(f'✅ Repository analysis completed: Health score {analysis[\"health_score\"]}/100')
            
            print('✅ GitHub integration tests passed')
        else:
            print('⚠️ GitHub integration not available (token not set)')
        "
        
    - name: 📋 GitHub Integration Summary
      run: |
        echo "## 🔗 GitHub Integration Test Results" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Integration**: GitHub API" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [test-system, test-agents, test-endpoints, test-github-integration]
    if: always()
    
    steps:
    - name: 📊 Generate Test Summary
      run: |
        echo "# 🧪 XMRT Ecosystem Test Suite Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Test Status Overview" >> $GITHUB_STEP_SUMMARY
        echo "- **System Tests**: ${{ needs.test-system.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Agent Tests**: ${{ needs.test-agents.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Endpoint Tests**: ${{ needs.test-endpoints.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Integration**: ${{ needs.test-github-integration.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 Test Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        
    - name: 🎉 Success Notification
      if: needs.test-system.result == 'success' && needs.test-agents.result == 'success' && needs.test-endpoints.result == 'success'
      run: |
        echo "🎉 All tests passed successfully!"
        echo "✅ XMRT Ecosystem is ready for deployment"
